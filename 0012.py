#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?
#from:http://projecteuler.net/problem=12

def main():
	sumnum=0
	num=0
	primelist=[]
	for i in range(1,500):#upper range needs to be 1 more than the intended as need to start at 1 instead of 0
		num+=i
		primelist[:]=[]
		primes=gen_primes(num)
		for prime in primes:
			if num%prime==0:
				primelist.append(prime)
		print primelist
		if len(primelist)>5:
			print num
			print primelist
			exit(0)

def gen_primes(rangeheight):
	numlist = {}
	num = 2
	for num in range(2,rangeheight):
		if num not in numlist:
			yield num
			numlist[num * num] = [num]
		else:
			for p in numlist[num]:
				numlist.setdefault(p + num, []).append(p)
			del numlist[num]
main()